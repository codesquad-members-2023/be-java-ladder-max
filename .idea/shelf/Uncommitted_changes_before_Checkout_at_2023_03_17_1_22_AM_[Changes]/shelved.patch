Index: docs/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># java-ladder\n2023 백엔드 자바 사다리게임 프로젝트\n\n## 주의사항\n- PR은 하루에 하나만, 한 PR에는 하나의 미션만 보내기\n- 객체 간의 협력 중점으로 고민해보기\n\n## 학습 내용\n| 날짜          | 학습키워드          | 세부내용                               |\n|-------------|----------------|------------------------------------|\n| 23.03.06(월) | `git`          | - 브랜치 생성 및 포크<br/>- CLI 명령어        |\n| 23.03.07(화) | `git`<br/>`OOP` | - PR<br/>- 오브젝트 들춰보기               |\n| 23.03.08(수) | `enum`<br/>`OOP` | - enum 활용 사례<br/>- 오브젝트 1장 정독 후 정리 |\n| 23.03.09(목) |                |                                    |\n\n\n---\n# 23.03.07 (화)\n## 1단계 - 기본 기능 구현\n### Check List\n- [x] 참가자 인원을 입력할 수 있도록 한다.\n- [x] 사다리 최대 개수를 입력할 수 있도록 한다.\n- [x] 입력값을 기반으로 사다리 상태를 출력한다.\n    - 2차원 배열 활용\n\n## 2단계 - 리팩토링\n### Check List\n- [x] 네이밍 컨벤션을 잘 지켰는지?\n- [ ] 최소한의 단위로 메서드를 분리했는지?(indent 2단계 이하)\n\n### 작업 결과\n- 좀 더 효율적이고 간결한 코드를 만들기 위한 방법 고민해보기(메서드를 더 분리해봐야 할지..)\n```java\npublic class LadderGenerator {\n  int maxHeight;\n  int column;\n  String[][] ladder;\n\n  public LadderGenerator(int joinMembers, int maxHeight) {\n    column = joinMembers + (joinMembers - 1);\n    ladder = new String[this.maxHeight = maxHeight][column];\n  }\n\n  public String[][] generateLadder() {\n    generateLadderArray();\n    generateRandomLine();\n    generateBorderLine();\n    return ladder;\n  }\n\n  public void generateLadderArray() {\n    ladder = new String[maxHeight][column];\n    for (int i = 0; i < ladder.length; i++) {\n      for (int j = 0; j < ladder[i].length; j++) {\n        ladder[i][j] = \" \";\n      }\n    }\n  }\n\n  public void generateRandomLine() {\n    Random random = new Random();\n    for (int i = 0; i < ladder.length; i++) {\n      for (int j = 0; j < ladder[i].length; j++) {\n        if (j % 2 != 0 && random.nextBoolean()) {\n          ladder[i][j] = \"-\";\n        }\n      }\n    }\n  }\n\n  public void generateBorderLine() {\n    for (int i = 0; i < ladder.length; i++) {\n      for (int j = 0; j < ladder[i].length; j++) {\n        if (j % 2 == 0) {\n          ladder[i][j] = \"|\";\n        }\n      }\n    }\n  }\n}\n```\n---\n# 23.03.09 (목)\n\n## To-do\n- [x] 학습계획 작성\n- [x] 그룹리뷰 내용을 바탕으로 코드 개선하기 // 2단계\n- [ ] `자바 문자열` 학습 후 정리\n- [ ] `리스트와 제네릭` 학습 후 정리\n\n## 그룹리뷰\n>- IDE 메서드 분리 기능을 이용해 메서드 분리 연습과 코드 가독성 향상하기\n>- 출력에 필요한 문자열을 상수 처리하기\n>- main 메서드에서는 객체의 동작만 보이게끔 수정하기\n>  - 생성자에서 new 연산자를 사용하는 방법이 있다.\n>- 접근제어자를 신경써서 캡슐화, 객체 간 협력에 집중하도록 하기\n>- naming과 커밋 메시지 신경쓰기\n\n그룹리뷰를 준비하는 시간이 필요할 것 같다.  \n준비되지 않은 상태에서 내가 고민했던 과정과 해결 과정을 조리있게 말하는게 쉽지 않았다.  \n다음 리뷰부터는 내가 얘기하고자 하는 내용을 다듬어 간결하게 전달해서 동료들의 입장에서 피드백이 원활할 수 있도록 노력해보자.\n\n## 2단계 - 리팩토링(그룹리뷰 반영)\n### 이중 for문 없이 2차원 배열 출력\n이중 for문 없이 2차원 배열을 다루는 방법을 계속해서 고민했지만 답이 나오지 않아 결국 구글링을 해봤다.   \n하나의 for문으로만 2차원 배열을 출력하는 방법이 있어 **printLadderState()** 메서드에 적용해보았다.   \n다른 방법을 좀 더 고민해봐야겠다..\n\n![](https://velog.velcdn.com/images/esgibtnureins/post/8cf5606b-d918-4983-a05f-fe0996de2e11/image.png)\n- 참고자료: https://coozplz.me/2011/11/09/2%EC%B0%A8%EC%9B%90-%EB%B0%B0%EC%97%B4for%EB%AC%B8-%ED%95%98%EB%82%98%EB%A1%9C-%EC%B6%9C%EB%A0%A5/\n\n### 작업 결과\n이중 for문을 메서드로 분리해보려고 했지만 쉽지 않았다.   \n인터페이스를 이용하면 좋을 것 같은데.. 인터페이스에 대해 잘 모르기도 하고   \n시간이 많이 걸릴 것 같아 여기서 마무리하기로 했다.\n\n```java\npackage kr.codesquad;\n\nimport java.util.Random;\n\npublic class LadderGenerator {\n    private int maxHeight;\n    private int maxWidth;\n    private int rowIndex;\n    private int columnIndex;\n    private String[][] ladder;\n\n    public LadderGenerator(int joinMembers, int maxHeight) {\n        this.maxHeight = maxHeight;\n        maxWidth = calculateMaxWidth(joinMembers);\n    }\n\n    public String[][] generateLadder() {\n        ladder = new String[maxHeight][maxWidth];\n        generateLadderArray();\n        generateBorderLine();\n        generateRandomLine();\n        return ladder;\n    }\n\n    private int calculateMaxWidth(int joinMembers) {\n        int maxWidth = joinMembers * 2 - 1;\n        return maxWidth;\n    }\n\n    private void generateLadderArray() {\n        for (rowIndex = 0; rowIndex < ladder.length; rowIndex++) {\n            for (columnIndex = 0; columnIndex < ladder[rowIndex].length; columnIndex++) {\n                ladder[rowIndex][columnIndex] = \" \";\n            }\n        }\n    }\n\n    private void generateBorderLine() {\n        for (rowIndex = 0; rowIndex < ladder.length; rowIndex++) {\n            for (columnIndex = 0; columnIndex < ladder[rowIndex].length; columnIndex++) {\n                if (columnIndex % 2 == 0) {\n                    ladder[rowIndex][columnIndex] = \"|\";\n                }\n            }\n        }\n    }\n\n    private void generateRandomLine() {\n        Random random = new Random();\n        for (rowIndex = 0; rowIndex < ladder.length; rowIndex++) {\n            for (columnIndex = 0; columnIndex < ladder[rowIndex].length; columnIndex++) {\n                if (columnIndex % 2 != 0 && random.nextBoolean()) {\n                    ladder[rowIndex][columnIndex] = \"-\";\n                }\n            }\n        }\n    }\n}\n```\n\n![img.png](img.png)\n---\n# 23.03.09(목)\n\n## 공통 Feedback\n- 네이밍 신경쓰기\n  - 클래스 이름, public 메서드 이름\n    - 간결하고 명확하게 의미를 전달할 수 있도록 하자.\n  - 객체.메서드(매개변수) -> 주어.동사(목적어|보어) 느낌이 되도록 지어보자.\n- magic 넘버 사용하지 않기\n- 테스트 코드 작성\n  - `@displayName` 어노테이션을 활용해서 테스트의 의도를 명확하게 표현하자.\n- 여유가 되면 예외처리 다양하게 도전해보기\n- 키워드 추천: `드미터의 법칙`, `일급 컬렉션`\n\n## To-do\n- [ ] 2차원 배열을 ArrayList로 변경하기\n- [x] 코어타임 이후 동료들과 오브젝트 읽기\n\n## 그룹리뷰\n- 다이어그램 활용하기.\n- 꼭 2차원 List를 사용해야 하는 건 아니다.\n---\n\n# 2주차 학습계획\n\n## Weekly To-do\n- [ ] 일급 객체&일급 컬렉션 알아보기\n- [ ] 오브젝트 3장까지 읽고 정리하기\n- [ ] final 키워드 알아보기\n- [ ] Strategy Pattern(전략 패턴) 알아보기\n\n## 3, 4단계 - 사다리 모양 개선 및 리팩토링\n### Check List\n- [x] 플레이어 인원 2명 이상으로 제한하기 // 예외처리\n- [ ] 플레이어 이름 1~5글자로 제한하기 // 예외처리\n- [ ] 플레이어 이름 ,(쉼표)로 구분 // 예외처리\n- [ ] 사다리 라인 column당 최소 1개 생성하기\n- [ ] 사다리 라인이 같은 row에 연속 생성되는 것 제한하기\n\n# 23.03.13 (월)\n- 미션 3단계 클래스 분리를 고민했다.\n- 오브젝트 2장을 정독했다.\n\n# 23.03.14 (화)\n## 그룹리뷰\n>- final 키워드 사용하기(동기 처리를 안해도 된다.)\n>  - 참고: https://mangkyu.tistory.com/131\n>- 의도를 쉽게 파악할 수 있는 네이밍에 신경쓰기\n\n## Strategy Pattern(전략 패턴)\n- 알고리즘을 캡슐화 하고, 동적으로 알고리즘을 교환해서 사용할 수 있게 하는 디자인 패턴이다.\n  - 즉, 알고리즘을 사용하는 클라이언트와 알고리즘을 구현하는 클래스로 분리해야 한다.\n  - 따라서 알고리즘의 결합도를 낮추고, 유연성과 확장성을 높일 수 있다.\n\n### 전략 패턴의 구성요소\n\n1. Context(컨텍스트)\n: 알고리즘을 사용하는 클라이언트 객체\n- 알고리즘을 사용하는데 필요한 데이터를 가지고 있으며, 알고리즘에 대한 요청을 처리한다.\n\n2. Strategy(전략)\n: 알고리즘을 구현하는 인터페이스\n- 알고리즘을 추상화한 것으로, 알고리즘을 구현한 클래스는 이 인터페이스를 구현한다.   \n\n3. Concrete Starategy(구체적인 전략)\n: 전략 인터페이스를 구현한 클래스\n- 컨텍스트가 요청한 알고리즘을 구현한다.\n\n### Random 클래스를 static final로 선언하는 이유\n  - 랜덤 클래스는 매번 새로운 값을 생성하기 때문에 인스턴스 공유를 위해 static 키워드를 사용해 동시 접근에도 안전하게 만든다.\n  - 한 번 생성된 랜덤 객체의 불변성을 보장하기 위해 final 키워드를 사용한다.\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docs/README.md b/docs/README.md
--- a/docs/README.md	
+++ b/docs/README.md	
@@ -247,3 +247,12 @@
 ### Random 클래스를 static final로 선언하는 이유
   - 랜덤 클래스는 매번 새로운 값을 생성하기 때문에 인스턴스 공유를 위해 static 키워드를 사용해 동시 접근에도 안전하게 만든다.
   - 한 번 생성된 랜덤 객체의 불변성을 보장하기 위해 final 키워드를 사용한다.
+
+# 23.03.15 (수)
+## 로직 설계 다시하기
+1. 참여자 수와 실행 결과, 사다리의 높이를 입력받는다. // InputView
+2. 높이에 따라서 가로줄이 그려빈 빈 사다리를 생성한다. 
+3. 각 가로줄마다 랜덤하게 오른쪽 또는 왼쪽으로 연결될 세로줄을 지정한다.
+4. 
+4. 생성된 사다리를 출력한다. //OutputView
+5. 
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"75cfef9c-bc50-442b-99d5-2d9016fefebb\" name=\"Changes\" comment=\"add: Player 클래스 추가\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/kr/codesquad/controller/LadderGameController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/kr/codesquad/controller/LadderGameController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/kr/codesquad/domain/Player.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/kr/codesquad/domain/Player.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/kr/codesquad/domain/PlayerName.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/kr/codesquad/domain/PlayerName.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/kr/codesquad/domain/Players.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/kr/codesquad/domain/Players.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/kr/codesquad/view/InputView.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/kr/codesquad/view/InputView.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ExternalProjectsData\">\n    <projectState path=\"$PROJECT_DIR$\">\n      <ProjectState />\n    </projectState>\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"dokkisan\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2JX36oPCnvQiefE3cZVtAUCgNFD\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/Users/hanawang/IdeaProjects/be-java-ladder-max&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\n    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;reference.settings.ide.settings.uml&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CreateClassDialog.RecentsKey\">\n      <recent name=\"kr.codesquad.domain\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/docs\" />\n      <recent name=\"$PROJECT_DIR$\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"kr.codesquad.Main\" />\n      <module name=\"java-lotto.main\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"kr.codesquad.view.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.Main\" />\n        <item itemvalue=\"Application.Main\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"75cfef9c-bc50-442b-99d5-2d9016fefebb\" name=\"Changes\" comment=\"\" />\n      <created>1672210428730</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1672210428730</updated>\n      <workItem from=\"1672210432725\" duration=\"156000\" />\n      <workItem from=\"1678091934798\" duration=\"1550000\" />\n      <workItem from=\"1678143731220\" duration=\"25412000\" />\n      <workItem from=\"1678289995396\" duration=\"974000\" />\n      <workItem from=\"1678324581213\" duration=\"23458000\" />\n      <workItem from=\"1678435271776\" duration=\"3505000\" />\n      <workItem from=\"1678671623118\" duration=\"10047000\" />\n      <workItem from=\"1678702219396\" duration=\"3147000\" />\n      <workItem from=\"1678756565441\" duration=\"14730000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"docs : 1단계 체크리스트 작성\">\n      <created>1678144272811</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1678144272812</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"refactor : LadderGenerator 클래스 로직 수정 및 메서드명 변경&#10;&#10;사다리의 요소를 만드는 메서드와 그 요소들을 결합하는 메서드로 분리해 로직을 수정했습니다.\">\n      <created>1678173079418</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1678173079418</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"refactor : LadderGenerator 클래스 로직 수정&#10;&#10;각 메서드 마다 중복 작업이 있어 로직을 수정했습니다.\">\n      <created>1678174176133</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1678174176133</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"refactor : calculateMaxWidth() 메서드 추가 및 변수명 변경&#10;&#10;1. 변수명 변경&#10;  - column -&gt; maxWidth&#10;2. calculateMaxWidth() 메서드 추가&#10;  - 생성자에서 계산하던 로직을 메서드 분리를 통해 수정\">\n      <created>1678346711250</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1678346711250</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"refactor : OutputView 클래스의 메서드명 변경 및 필드 추가&#10;&#10;1. 필드 추가&#10;  - PARTICIPANTS_PROMPT, MAX_HEIGHT_PROMPT&#10;2. 메서드명 변경&#10;  - printJoinMembers() -&gt; printParticipantsPrompt()&#10;  - printMaxHeight() -&gt; printMaxHeightPrompt()\">\n      <created>1678348775989</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1678348775989</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"refactor : OutputView 클래스 로직 수정&#10;&#10;1. printLadderState() -&gt; drawLadderDiagram()&#10;  - 접근제어자 변경으로 캡슐화(public -&gt; private)&#10;  - printLadder 메서드를 사용하기 위해 메서드명 정정&#10;2. printLadder 메서드 추가&#10;  - drawLadderDiagram()를 호출하는 public 메서드\">\n      <created>1678351466174</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1678351466174</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"add: Player 클래스 추가\">\n      <created>1678775859370</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1678775859370</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"8\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"upstream/dokkisan\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"docs : 1단계 체크리스트 작성\" />\n    <MESSAGE value=\"refactor : LadderGenerator 클래스 로직 수정 및 메서드명 변경&#10;&#10;사다리의 요소를 만드는 메서드와 그 요소들을 결합하는 메서드로 분리해 로직을 수정했습니다.\" />\n    <MESSAGE value=\"refactor : LadderGenerator 클래스 로직 수정&#10;&#10;각 메서드 마다 중복 작업이 있어 로직을 수정했습니다.\" />\n    <MESSAGE value=\"refactor : calculateMaxWidth() 메서드 추가 및 변수명 변경&#10;&#10;1. 변수명 변경&#10;  - column -&gt; maxWidth&#10;2. calculateMaxWidth() 메서드 추가&#10;  - 생성자에서 계산하던 로직을 메서드 분리를 통해 수정\" />\n    <MESSAGE value=\"refactor : OutputView 클래스의 메서드명 변경 및 필드 추가&#10;&#10;1. 필드 추가&#10;  - PARTICIPANTS_PROMPT, MAX_HEIGHT_PROMPT&#10;2. 메서드명 변경&#10;  - printJoinMembers() -&gt; printParticipantsPrompt()&#10;  - printMaxHeight() -&gt; printMaxHeightPrompt()\" />\n    <MESSAGE value=\"refactor : OutputView 클래스 로직 수정&#10;&#10;1. printLadderState() -&gt; drawLadderDiagram()&#10;  - 접근제어자 변경으로 캡슐화(public -&gt; private)&#10;  - printLadder 메서드를 사용하기 위해 메서드명 정정&#10;2. printLadder 메서드 추가&#10;  - drawLadderDiagram()를 호출하는 public 메서드\" />\n    <MESSAGE value=\"add: Player 클래스 추가\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"add: Player 클래스 추가\" />\n  </component>\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\n    <expand />\n    <select />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -4,13 +4,18 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="75cfef9c-bc50-442b-99d5-2d9016fefebb" name="Changes" comment="add: Player 클래스 추가">
+    <list default="true" id="75cfef9c-bc50-442b-99d5-2d9016fefebb" name="Changes" comment="refactor : OutputView 클래스 로직 수정&#10;&#10;1. printLadderState() -&gt; drawLadderDiagram()&#10;  - 접근제어자 변경으로 캡슐화(public -&gt; private)&#10;  - printLadder 메서드를 사용하기 위해 메서드명 정정&#10;2. printLadder 메서드 추가&#10;  - drawLadderDiagram()를 호출하는 public 메서드">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/docs/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/docs/README.md" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/kr/codesquad/controller/LadderGameController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/codesquad/controller/LadderGameController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/kr/codesquad/domain/Ladder.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/codesquad/domain/Ladder.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/kr/codesquad/domain/LadderGenerator.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/kr/codesquad/domain/Line.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/codesquad/domain/Line.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/kr/codesquad/domain/Player.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/codesquad/domain/Player.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/kr/codesquad/domain/PlayerName.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/codesquad/domain/PlayerName.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/kr/codesquad/domain/Players.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/codesquad/domain/Players.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/kr/codesquad/view/InputView.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/codesquad/view/InputView.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/kr/codesquad/domain/Point.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/codesquad/domain/Point.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/kr/codesquad/service/LadderGameService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/codesquad/service/LadderGameService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/kr/codesquad/strategy/RandomLinkStrategy.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/kr/codesquad/strategy/RandomLinkStrategy.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -112,6 +117,9 @@
       <workItem from="1678671623118" duration="10047000" />
       <workItem from="1678702219396" duration="3147000" />
       <workItem from="1678756565441" duration="14730000" />
+      <workItem from="1678893110782" duration="1660000" />
+      <workItem from="1678949931061" duration="590000" />
+      <workItem from="1678964363075" duration="598000" />
     </task>
     <task id="LOCAL-00001" summary="docs : 1단계 체크리스트 작성">
       <created>1678144272811</created>
@@ -200,6 +208,21 @@
     <MESSAGE value="refactor : OutputView 클래스 로직 수정&#10;&#10;1. printLadderState() -&gt; drawLadderDiagram()&#10;  - 접근제어자 변경으로 캡슐화(public -&gt; private)&#10;  - printLadder 메서드를 사용하기 위해 메서드명 정정&#10;2. printLadder 메서드 추가&#10;  - drawLadderDiagram()를 호출하는 public 메서드" />
     <MESSAGE value="add: Player 클래스 추가" />
     <option name="LAST_COMMIT_MESSAGE" value="add: Player 클래스 추가" />
+  </component>
+  <component name="XDebuggerManager">
+    <breakpoint-manager>
+      <breakpoints>
+        <line-breakpoint enabled="true" type="java-method">
+          <url>file://$PROJECT_DIR$/src/main/java/kr/codesquad/domain/Line.java</url>
+          <line>14</line>
+          <properties class="kr.codesquad.domain.Line" method="&lt;init&gt;">
+            <option name="EMULATED" value="true" />
+            <option name="WATCH_EXIT" value="false" />
+          </properties>
+          <option name="timeStamp" value="1" />
+        </line-breakpoint>
+      </breakpoints>
+    </breakpoint-manager>
   </component>
   <component name="XSLT-Support.FileAssociations.UIState">
     <expand />
Index: src/main/java/kr/codesquad/domain/Point.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.codesquad.domain;\n\n// 좌표값을 가지고 출발점과 도착점 표현\n// 사다리 라인을 그리고, 이동 경로를 결정하는데 필수적인 역할\npublic class Point {\n    private final int index;\n\n    public Point(final int index) {\n        this.index = index;\n    }\n\n}\n
===================================================================
diff --git a/src/main/java/kr/codesquad/domain/Point.java b/src/main/java/kr/codesquad/domain/Point.java
--- a/src/main/java/kr/codesquad/domain/Point.java	
+++ b/src/main/java/kr/codesquad/domain/Point.java	
@@ -1,7 +1,9 @@
 package kr.codesquad.domain;
 
+import java.util.List;
+
 // 좌표값을 가지고 출발점과 도착점 표현
-// 사다리 라인을 그리고, 이동 경로를 결정하는데 필수적인 역할
+// 사다리 라인을 그리고 이동 경로를 결정
 public class Point {
     private final int index;
 
@@ -9,4 +11,11 @@
         this.index = index;
     }
 
+    public int getIndex() {
+        return index;
+    }
+
+    public int move(final List<Direction> directions) {
+        return directions.move(index);
+    }
 }
Index: src/main/java/kr/codesquad/domain/PlayerName.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.codesquad.domain;\n\npublic class PlayerName {\n    private final PlayerName name;\n\n    public PlayerName(PlayerName name) {\n        this.name = name;\n    }\n}\n
===================================================================
diff --git a/src/main/java/kr/codesquad/domain/PlayerName.java b/src/main/java/kr/codesquad/domain/PlayerName.java
--- a/src/main/java/kr/codesquad/domain/PlayerName.java	
+++ b/src/main/java/kr/codesquad/domain/PlayerName.java	
@@ -1,9 +1,9 @@
 package kr.codesquad.domain;
 
 public class PlayerName {
-    private final PlayerName name;
+    private final String name;
 
-    public PlayerName(PlayerName name) {
+    public PlayerName(String name) {
         this.name = name;
     }
 }
Index: src/main/java/kr/codesquad/domain/Ladder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.codesquad.domain;\n\nimport java.util.List;\n\npublic class Ladder {\n    private final String MINIMUM_HEIGHT_ERROR = \"사다리 높이는 1부터 입력 가능합니다.\";\n    private final int MINIMUM_HEIGHT = 1;\n    private List<Line> lines;\n\n    public Ladder(int maxHeight, int playersCount) {\n//        validateRandomLine(lines);         // 열 검사(column에 최소 1개 이상의 라인 생성)\n//        validateContinuousLine(lines);     // 행 검사(row의 line이 연속되는 것 제한)\n        validateMinimumHeight(maxHeight);\n        this.lines = generateLadder(maxHeight, playersCount);\n    }\n\n\n    private void validateMinimumHeight(int ladderHeight) {\n        if (MINIMUM_HEIGHT > ladderHeight) {\n            throw new IllegalArgumentException(MINIMUM_HEIGHT_ERROR);\n        }\n    }\n\n    private List<Line> generateLadder(int ladderHeight, int countOfPlayers) {\n        return lines;\n    }\n\n//    private void validateRandomLine(List<Line> ladderLines) {\n//\n//    }\n//\n//    private void validateContinuousLine(List<Line> ladderLines) {\n//\n//    }\n}\n
===================================================================
diff --git a/src/main/java/kr/codesquad/domain/Ladder.java b/src/main/java/kr/codesquad/domain/Ladder.java
--- a/src/main/java/kr/codesquad/domain/Ladder.java	
+++ b/src/main/java/kr/codesquad/domain/Ladder.java	
@@ -1,17 +1,16 @@
 package kr.codesquad.domain;
 
+import java.util.ArrayList;
 import java.util.List;
 
 public class Ladder {
     private final String MINIMUM_HEIGHT_ERROR = "사다리 높이는 1부터 입력 가능합니다.";
     private final int MINIMUM_HEIGHT = 1;
-    private List<Line> lines;
+    private Lines lines;
 
-    public Ladder(int maxHeight, int playersCount) {
-//        validateRandomLine(lines);         // 열 검사(column에 최소 1개 이상의 라인 생성)
-//        validateContinuousLine(lines);     // 행 검사(row의 line이 연속되는 것 제한)
-        validateMinimumHeight(maxHeight);
-        this.lines = generateLadder(maxHeight, playersCount);
+    public Ladder(int ladderHeight, int playersCount) {
+        validateMinimumHeight(ladderHeight);
+        this.lines = new Lines(ladderHeight, playersCount);
     }
 
 
@@ -21,15 +20,13 @@
         }
     }
 
-    private List<Line> generateLadder(int ladderHeight, int countOfPlayers) {
+    private List<Line> generateLadder(int ladderHeight, int playersCount) {
+        List<Line> lines = new ArrayList<>();
+        for (int i = 0; i <ladderHeight; i++) {
+            Line line = new Line(playersCount);
+            lines.add(line);
+        }
         return lines;
     }
 
-//    private void validateRandomLine(List<Line> ladderLines) {
-//
-//    }
-//
-//    private void validateContinuousLine(List<Line> ladderLines) {
-//
-//    }
 }
Index: src/main/java/kr/codesquad/domain/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.codesquad.domain;\n\npublic class Player {\n    private final PlayerName name;\n    private final int position;\n\n    public Player(PlayerName name, int position) {\n        this.name = new PlayerName(name);\n        this.position = position;\n    }\n}\n
===================================================================
diff --git a/src/main/java/kr/codesquad/domain/Player.java b/src/main/java/kr/codesquad/domain/Player.java
--- a/src/main/java/kr/codesquad/domain/Player.java	
+++ b/src/main/java/kr/codesquad/domain/Player.java	
@@ -2,10 +2,12 @@
 
 public class Player {
     private final PlayerName name;
-    private final int position;
+    private final Position position;
 
-    public Player(PlayerName name, int position) {
-        this.name = new PlayerName(name);
-        this.position = position;
+    public Player(final PlayerName name, final int position) {
+        this.name = name;
+        this.position = new Position(position);
     }
+
+
 }
Index: src/main/java/kr/codesquad/domain/Line.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.codesquad.domain;\n\nimport kr.codesquad.strategy.RandomLinkStrategy;\n\nimport java.util.List;\n\nimport static kr.codesquad.domain.Direction.LEFT;\n\npublic class Line {\n//    private static final String MAX_NAME_LENGTH_ERROR = \"플레이어의 이름은 5글자 이내로 입력해주세요.\";\n//    private static final String MIN_NUM_OF_PLAYER_ERROR = \"참여할 플레이어를 2명 이상 입력해주세요.\";\n//    private static final int MAX_PLAYER_NAME_LENGTH = 5;\n//    private static final int MIN_NUM_OF_PLAYER = 2;\n//    private final int lengthOfPlayerName;\n//    private final int countOfPlayers;\n\n    private final int size; // 라인의 길이\n    private final List<Direction> directions;   // 라인의 이동 방향\n\n    public Line(int size) {\n        this.size = size;\n    }\n\n    private void link(RandomLinkStrategy strategy) {\n        directions.addAll(strategy);    // 결정된 라인의 이동 방향 추가\n    }\n\n    private void move() {\n        int currentIndex;   // 이동 결과 반환\n    }\n\n    private boolean isLinked(final Direction direction) {\n        return direction.equals(LEFT);\n    }\n\n    //    public Line(int lengthOfPlayerName, int countOfPlayers) {\n//        this.lengthOfPlayerName = lengthOfPlayerName;\n//        this.countOfPlayers = countOfPlayers;\n//    }\n//\n//    public Line(List<Point> points) {\n//        this.points = points;\n//    }\n//\n//    private void validatePlayerNameLength() {\n//        if (MAX_PLAYER_NAME_LENGTH < lengthOfPlayerName) {\n//            throw new IllegalArgumentException(MAX_NAME_LENGTH_ERROR);\n//        }\n//    }\n//\n//    private void validateMinimumPlayers() {\n//        if (MIN_NUM_OF_PLAYER > countOfPlayers) {\n//            throw new IllegalArgumentException(MIN_NUM_OF_PLAYER_ERROR);\n//        }\n//    }\n}\n
===================================================================
diff --git a/src/main/java/kr/codesquad/domain/Line.java b/src/main/java/kr/codesquad/domain/Line.java
--- a/src/main/java/kr/codesquad/domain/Line.java	
+++ b/src/main/java/kr/codesquad/domain/Line.java	
@@ -2,55 +2,30 @@
 
 import kr.codesquad.strategy.RandomLinkStrategy;
 
+import java.util.ArrayList;
 import java.util.List;
 
-import static kr.codesquad.domain.Direction.LEFT;
+import static kr.codesquad.domain.Direction.RIGHT;
 
 public class Line {
-//    private static final String MAX_NAME_LENGTH_ERROR = "플레이어의 이름은 5글자 이내로 입력해주세요.";
-//    private static final String MIN_NUM_OF_PLAYER_ERROR = "참여할 플레이어를 2명 이상 입력해주세요.";
-//    private static final int MAX_PLAYER_NAME_LENGTH = 5;
-//    private static final int MIN_NUM_OF_PLAYER = 2;
-//    private final int lengthOfPlayerName;
-//    private final int countOfPlayers;
 
-    private final int size; // 라인의 길이
-    private final List<Direction> directions;   // 라인의 이동 방향
+    private final int ladderHeight; // 라인의 길이
+    private final List<Direction> directions = new ArrayList<>();   // 라인의 이동 방향
 
-    public Line(int size) {
-        this.size = size;
+    public Line(int ladderHeight) {
+        this.ladderHeight = ladderHeight;
     }
 
     private void link(RandomLinkStrategy strategy) {
-        directions.addAll(strategy);    // 결정된 라인의 이동 방향 추가
+        directions.addAll(strategy.link(ladderHeight));    // 결정된 라인의 이동 방향 추가
     }
 
-    private void move() {
-        int currentIndex;   // 이동 결과 반환
+    private int move(Point point) {
+        return point.move(directions);   // 이동 결과 반환
+
     }
 
     private boolean isLinked(final Direction direction) {
-        return direction.equals(LEFT);
+        return direction == RIGHT;
     }
-
-    //    public Line(int lengthOfPlayerName, int countOfPlayers) {
-//        this.lengthOfPlayerName = lengthOfPlayerName;
-//        this.countOfPlayers = countOfPlayers;
-//    }
-//
-//    public Line(List<Point> points) {
-//        this.points = points;
-//    }
-//
-//    private void validatePlayerNameLength() {
-//        if (MAX_PLAYER_NAME_LENGTH < lengthOfPlayerName) {
-//            throw new IllegalArgumentException(MAX_NAME_LENGTH_ERROR);
-//        }
-//    }
-//
-//    private void validateMinimumPlayers() {
-//        if (MIN_NUM_OF_PLAYER > countOfPlayers) {
-//            throw new IllegalArgumentException(MIN_NUM_OF_PLAYER_ERROR);
-//        }
-//    }
 }
Index: src/main/java/kr/codesquad/service/LadderGameService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.codesquad.service;\n\n// 비즈니스 로직 구현(DB와 상호작용)\npublic class LadderGameService {\n\n}\n
===================================================================
diff --git a/src/main/java/kr/codesquad/service/LadderGameService.java b/src/main/java/kr/codesquad/service/LadderGameService.java
--- a/src/main/java/kr/codesquad/service/LadderGameService.java	
+++ b/src/main/java/kr/codesquad/service/LadderGameService.java	
@@ -1,6 +1,13 @@
 package kr.codesquad.service;
 
+import kr.codesquad.domain.Ladder;
+import kr.codesquad.domain.Player;
+
+import java.util.List;
+
 // 비즈니스 로직 구현(DB와 상호작용)
 public class LadderGameService {
-
+    private Ladder createLadder(int ladderHeight, int countOfPlayers) {
+        List<Player> players
+    }
 }
Index: src/main/java/kr/codesquad/strategy/RandomLinkStrategy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.codesquad.strategy;\n\nimport kr.codesquad.domain.Direction;\n\nimport java.util.List;\nimport java.util.Random;\n\npublic class RandomLinkStrategy implements LinkStrategy {\n    private static final Random random = new Random();\n\n    @Override\n    public List<Direction> link(int ladderHeight) {\n        return null;\n    }\n}\n
===================================================================
diff --git a/src/main/java/kr/codesquad/strategy/RandomLinkStrategy.java b/src/main/java/kr/codesquad/strategy/RandomLinkStrategy.java
--- a/src/main/java/kr/codesquad/strategy/RandomLinkStrategy.java	
+++ b/src/main/java/kr/codesquad/strategy/RandomLinkStrategy.java	
@@ -2,14 +2,43 @@
 
 import kr.codesquad.domain.Direction;
 
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
+import java.util.stream.IntStream;
+
+import static kr.codesquad.domain.Direction.*;
 
 public class RandomLinkStrategy implements LinkStrategy {
     private static final Random random = new Random();
 
     @Override
-    public List<Direction> link(int ladderHeight) {
-        return null;
+    public List<Direction> link(final int ladderHeight) {
+        List<Direction> linked = new ArrayList<>();
+        final int lastIndex = ladderHeight - 1;
+
+        IntStream.range(0, ladderHeight)
+                .mapToObj(i -> nextDirection(i, lastIndex, linked))
+                .forEach(linked::add);
+
+        return linked;
+    }
+
+    private Direction nextDirection(final int currentIndex, final int lastIndex, final List<Direction> linked) {
+        if (currentIndex != 0 && isAlreadyLinked(currentIndex, linked)) {
+            return LEFT;
+        }
+
+        if (currentIndex != lastIndex && random.nextBoolean()) {
+            return RIGHT;
+        }
+
+        return STRAIGHT;
+    }
+
+    private boolean isAlreadyLinked(final int currentIndex, final List<Direction> linked) {
+        return linked.stream()
+                .limit(currentIndex)
+                .anyMatch(direction -> direction == RIGHT);
     }
 }
Index: src/main/java/kr/codesquad/controller/LadderGameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.codesquad.controller;\n\nimport kr.codesquad.domain.LadderGenerator;\nimport kr.codesquad.domain.Players;\nimport kr.codesquad.view.InputView;\nimport kr.codesquad.view.OutputView;\n\n// 사용자 입력 처리 및 model, view 관리\npublic class LadderGameController {\n    private final OutputView outputView;\n    private final InputView inputView;\n    private LadderGenerator ladderGenerator;\n\n    public LadderGameController() {\n        this.outputView = new OutputView();\n        this.inputView = new InputView();\n    }\n\n    public void startLadderGame() {\n        outputView.printPlayersPrompt();\n//        String[] names = inputView.inputNames().split(\",\");\n//        Players players = new Players(names);\n\n        outputView.printMaxHeightPrompt();\n        int ladderHeight = inputView.inputLadderHeight();\n\n        this.ladderGenerator = new LadderGenerator(ladderHeight, ladderHeight); // 다른 방법 찾아보기\n        String[][] ladder = ladderGenerator.generateLadder();\n        outputView.printLadder(ladder);\n    }\n\n\n}
===================================================================
diff --git a/src/main/java/kr/codesquad/controller/LadderGameController.java b/src/main/java/kr/codesquad/controller/LadderGameController.java
--- a/src/main/java/kr/codesquad/controller/LadderGameController.java	
+++ b/src/main/java/kr/codesquad/controller/LadderGameController.java	
@@ -1,7 +1,5 @@
 package kr.codesquad.controller;
 
-import kr.codesquad.domain.LadderGenerator;
-import kr.codesquad.domain.Players;
 import kr.codesquad.view.InputView;
 import kr.codesquad.view.OutputView;
 
